namespace Lua
{
    static bool AttackableCanAttack(lua_State* pState)
    {
        auto pClass = reinterpret_cast<Attackable*>(lua_touserdata(pState, 1));
        bool canAttack = pClass->CanAttack();
        lua_pop(pState, 1);
        return canAttack;
    }
    static int AttackableSetAttack(lua_State* pState)
    {
        auto pClass = reinterpret_cast<Attackable*>(lua_touserdata(pState, 1));
        bool canAttack = static_cast<bool>(luaL_checknumber(pState, 2));
        pClass->SetAttack(canAttack);
        lua_pop(pState, 2);
        return 0;
    }
}

void Attackable::RegisterWithScript()
{
    auto& scripting = ApplicationLayer::GetInstance()->GetGameLayer()->GetScriptingManager();
    scripting.GetGlobal("g_logic");
    scripting.GetFromTable("actors");
    scripting.GetFromTable(GetOwner()->GetId());

    scripting.CreateTable();
    scripting.AddToTable("this", this);
    scripting.AddToTable("CanAttack", Lua::AttackableCanAttack);
    scripting.AddToTable("SetAttack", Lua::AttackableSetAttack);
    scripting.AddToTable("Attackable");
    scripting.PopAll();
}
