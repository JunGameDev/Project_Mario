namespace Lua
{
    static int HealthComponentGetHP(lua_State* pState)
    {
        auto pClass = reinterpret_cast<HealthComponent*>(lua_touserdata(pState, 1));
        int hp = pClass->GetHP();
        lua_pop(pState, 1);
        return hp;
    }
    static int HealthComponentSetHP(lua_State* pState)
    {
        auto pClass = reinterpret_cast<HealthComponent*>(lua_touserdata(pState, 1));
        int hp = static_cast<int>(luaL_checknumber(pState, 2));
        pClass->SetHP(hp);
        lua_pop(pState, 2);
        return 0;
    }
    static int HealthComponentTakeDamage(lua_State* pState)
    {
        auto pClass = reinterpret_cast<HealthComponent*>(lua_touserdata(pState, 1));
        int hp = static_cast<int>(luaL_checknumber(pState, 2));
        pClass->TakeDamage(hp);
        lua_pop(pState, 2);
        return 0;
    }
    static int HealthComponentGainPoint(lua_State* pState)
    {
        auto pClass = reinterpret_cast<HealthComponent*>(lua_touserdata(pState, 1));
        int hp = static_cast<int>(luaL_checknumber(pState, 2));
        pClass->GainPoint(hp);
        lua_pop(pState, 2);
        return 0;
    }
}

void HealthComponent::RegisterWithScript()
{
    auto& scripting = ApplicationLayer::GetInstance()->GetGameLayer()->GetScriptingManager();
    scripting.GetGlobal("g_logic");
    scripting.GetFromTable("actors");
    scripting.GetFromTable(GetOwner()->GetId());

    scripting.CreateTable();
    scripting.AddToTable("this", this);
    scripting.AddToTable("GetHP", Lua::HealthComponentGetHP);
    scripting.AddToTable("SetHP", Lua::HealthComponentSetHP);
    scripting.AddToTable("TakeDamage", Lua::HealthComponentTakeDamage);
    scripting.AddToTable("GainPoint", Lua::HealthComponentGainPoint);
    scripting.AddToTable("HealthComponent");
    scripting.PopAll();
}
